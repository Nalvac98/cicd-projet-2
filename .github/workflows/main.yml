# Nom du workFlow
name: CI/CD

# Déclaration des variables d'environnement utilisées dans le workflow
env:
  SERVER_IP: '162.19.228.83'
  SERVER_USER: 'root'

# Paramètre pour gérer la concurrence des jobs
concurrency:
  group: ${{github.workflow}}-${{github.ref}} # Basé sur le nom du workflow et la référence git
  cancel-in-progress: true # Annule les jobs en cours si un nouveau job es lancé dans le mm groupe 

# Événement déclenchant le workflow
on:
  pull_request:
    branches:
      - '*'
  push:
    branches:
      - main
    tags:
      - '*'

# Description des jobs à exécuter
jobs:
  # Jobs Server Tests-Unit
  Unit-tests-backend:
    runs-on: ubuntu-latest # Exécute sur la dernière version d'Ubuntu
    defaults: # Options par défaut pour les étapes
      run:
        working-directory: ./server # Dossier de travail par défaut
    steps:
      - name: Checkout Code  # Récupère le code source
        uses: actions/checkout@v4 # Utilise l'action de checkout
      - name: Install node JS  # Installe Node.js
        uses: actions/setup-node@v3 # Utilise l'action setup-node
        with: # Options supplémentaires
          cache: 'npm' # Met en cache les dépendances npm
          cache-dependency-path: ./server/package-lock.json # Chemin du fichier package-lock.json
      - name: Install dependencies # Installe les dépendances npm
        run: npm ci # Installe les dépendances en mode "clean install"
      - name: Code checking
        run: npm run lint   # Exécute le script de lint
      - name: Checking vulnerability of dependencies
        run: npm audit
      - name: Test running
        run: npm run test:ci # Exécute le script de test

      - name: Upload coverage reports to Codecov # CodeDov Pour visualiser les parties du code non couverte par les tests
        uses: codecov/codecov-action@v3
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  Unit-test-frontend:
    runs-on: ubuntu-latest # Exécute sur la dernière version d'Ubuntu
    defaults: # Options par défaut pour les étapes
      run:
        working-directory: ./client # Dossier de travail par défaut
    steps:
      - name: Checkout Code  # Récupère le code source
        uses: actions/checkout@v4 # Utilise l'action de checkout
      - name: Install node JS  # Installe Node.js
        uses: actions/setup-node@v3 # Utilise l'action setup-node
        with: # Options supplémentaires
          cache: 'npm' # Met en cache les dépendances npm
          cache-dependency-path: ./client/package-lock.json # Chemin du fichier package-lock.json
      - name: Install dependencies # Installe les dépendances npm
        run: npm ci # Installe les dépendances en mode "clean install"
      - name: Code checking
        run: npm run lint   # Exécute le script de lint
      - name: Checking vulnerability of dependencies
        run: npm audit

  Build-frontend:
    needs: Unit-test-frontend
    runs-on: ubuntu-latest # Exécute sur la dernière version d'Ubuntu
    if: startsWith(github.ref, 'refs/tags/') || contains(github.ref, 'refs/heads/main')
    defaults: # Options par défaut pour les étapes
      run:
        working-directory: ./client # Dossier de travail par défaut
    steps:
      - name: Checkout Code  # Récupère le code source
        uses: actions/checkout@v4 # Utilise l'action de checkout
      - name: Install node JS  # Installe Node.js
        uses: actions/setup-node@v3 # Utilise l'action setup-node
        with: # Options supplémentaires
          cache: 'npm' # Met en cache les dépendances npm
          cache-dependency-path: ./client/package-lock.json # Chemin du fichier package-lock.json
      - name: Install dependencies # Installe les dépendances npm
        run: npm ci # Installe les dépendances en mode "clean install"
      - name: Build Frontend App
        run: npm run build   # Build L'application front
      - name: Upload Build Artifact # Récupération du build de notre app
        uses: actions/upload-artifact@v3 # Utilise l'action artifact
        with:
          name: build   # Nom de l'artifact
          path: ./client/dist # Répertoire de sauvegade de l'artifact

  test_e2e:
    runs-on: ubuntu-latest
    needs: [ Build-frontend ]
    steps:
      - name: checkout le code
        uses: actions/checkout@v4

      - name: télécharger l'artéfact du frontend
        uses: actions/download-artifact@v3
        with:
          name: frontend-dist
          path: client/dist/

      - name: installer Node.js
        uses: actions/setup-node@v3
        with:
          cache: 'npm'
          cache-dependency-path: server/package-lock.json

      - name: installer les dépendances serveur
        run: |
          cd server
          npm ci --prefer-offline

      - name: lancer le serveur backend
        run: |
          cd server
          node index.js &

      - name: Cypress
        uses: cypress-io/github-action@v6
        with:
          working-directory: client
          browser: chrome
          start: npm run preview
          wait-on: http://localhost:4173
          wait-on-timeout: 60
          config: baseUrl=http://localhost:4173



  # Job pour le déploiement
  Deploy:
    needs:
      - Unit-tests-backend # Dépend du job "Unit-tests"
      - test_e2e
    runs-on: ubuntu-latest
    # Ce jobs s'exécute que si c'est un push de tags sur la branche main
    if: startsWith(github.ref, 'refs/tags')
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: build
          path: ./dist
      - name: Run on VPS
        run:
          # Commandes shell à exécuter (Initialise l'agent SSH - Ajout d'une clé Ssh privée et du serveur hôtes connus,
          # Envoie du code situé dans ./server vers le VPS)
          # Installe des dépendances sur le serveur
          # Démarre ou redémarre le service avec pm2 (Gestionnaire de processus pour le runtime JavaScript Node.js)
          |
          eval $(ssh-agent -s)  
          ssh-add - <<< "${{secrets.SSH_KEY_VPS}}"
          mkdir -p ~/.ssh
          ssh-keyscan -H $SERVER_IP  >> ~/.ssh/known_hosts 
          scp -r ./server $SERVER_USER@$SERVER_IP:/var/ww
          scp -r ./dist $SERVER_USER@$SERVER_IP:/var/ww
          ssh $SERVER_USER@$SERVER_IP "cd /var/ww/server && npm install --omit=dev"
          ssh $SERVER_USER@$SERVER_IP "cd /var/ww/server && pm2 startOrRestart ecosystem.config.js --env production && pm2 save"
